@model Scales
@{
    Dictionary<int, string> romeanNumbers = new Dictionary<int, string>()
    {
        {1, "I"},
        {2, "II"},
        {3, "III"},
        {4, "IV"},
        {5, "V"},
        {6, "VI"},
        {7, "VII"},
        {8, "VIII"},
        {9, "IX"},
        {10, "X"},
        {11, "XI"},
        {12, "XII"},
        {13, "XIII"},
    };

    Scales scales = Model as Scales;
}

<div class="graph">
    <svg class="polyline-canvas">
        <linearGradient id="linear-gradient">
            <stop offset="0%" stop-color="rgb(160, 240, 240)" />
            <stop offset="100%" stop-color="rgb(216, 240, 204)" />
        </linearGradient>
        <polyline class="polyline" points="0,0"/>
    </svg>

    <div class="graph-grid">
        @*Тут бы добавить параметр из конфига (количетво линий графика)*@ 
        @for (int i = 0; i <= 100; i += 10)
        {
            <div class="horizontal" style="top: @i%">
                <div class="horizontal-value">@(100 - i)</div>
            </div>
        }
    </div>

    <div class="graph-content">
        <div class="graph-column">
            <div class="graph-axis"></div>
        </div>
        @for (int i = 0; i < scales.Values.Count(); i++)
        {
            <div class="graph-column">
                <div class="graph-vertex" name="@Scales.ScalesNames[i]" style="top: @(100 - scales[i])%">
                    <input type="number" name="@Scales.ScalesNames[i]" class="vertex-value" value="@scales[i]">
                </div>
                <div class="column-name" name="@Scales.ScalesNames[i]">
                    @romeanNumbers[i + 1]
                </div>
            </div>

        }
    </div>
</div>
